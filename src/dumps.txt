// const positionSuggestions = ({ state, props }) => {
//   let transform;
//   let transition;

//   console.log(state, props);

//   if (state.isActive && props.suggestions.length > 0) {
//     transform = 'scaleY(1)';
//     transition = 'all 0.25s cubic-bezier(.3,1.2,.2,1)';
//   } else if (state.isActive) {
//     transform = 'scaleY(0)';
//     transition = 'all 0.25s cubic-bezier(.3,1,.2,1)';
//   }

//   return {
//     transform,
//     transition,
//   };
// };

// const Entry = (props) => {
//   const {
//     mention,
//     theme,
//     searchValue, // eslint-disable-line no-unused-vars
//     isFocused, // eslint-disable-line no-unused-vars
//     ...parentProps
//   } = props;

//   return (
//     <div {...parentProps}>
//       <div className={theme.mentionSuggestionsEntryContainer}>
//         <div className={theme.mentionSuggestionsEntryContainerLeft}>
//           <img
//             src={mention.avatar}
//             className={theme.mentionSuggestionsEntryAvatar}
//             role="presentation"
//             alt=""
//           />
//         </div>

//         <div className={theme.mentionSuggestionsEntryContainerRight}>
//           <div className={theme.mentionSuggestionsEntryText}>
//             {mention.name}
//           </div>

//           <div className={theme.mentionSuggestionsEntryTitle}>
//             {mention.title}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };


// export default class PostComposer extends Component {
//   constructor(props) {
//     super(props);

//     this.mentionPlugin = createMentionPlugin({
//       mentions,
//       entityMutability: 'IMMUTABLE',
//       theme: mentionsStyles,
//       positionSuggestions,
//       mentionPrefix: '@',
//       supportWhitespace: true,
//     });

//     this.myMap = createRef();
//   }

//   state = {
//     editorState: EditorState.createEmpty(),
//     suggestions: mentions,
//     marker: {
//       longitude: 83.32147657871246,
//       latitude: 17.71590375180617,
//     },
//     viewport: {
//       longitude: 83.32147657871246,
//       latitude: 17.71590375180617,
//       zoom: 8,
//       width: '400px' || this.myMap.current.clientWidth,
//       height: '400px' || this.myMap.current.clientHeight,
//     },
//   };

//   onChange = (editorState) => {
//     this.setState({
//       editorState,
//     });
//   };

//   onSearchChange = ({ value }) => {
//     this.setState({
//       suggestions: defaultSuggestionsFilter(value, mentions),
//     });
//   };

//   focus = () => {
//     this.editor.focus();
//   };

//   handleResize = () => {
//     this.myMap.current &&
//       this.setState({
//         ...this.state.viewport,
//         height: this.myMap.current.clientHeight,
//         width: this.myMap.current.clientWidth,
//       });
//   };

//   handleGeolocate = () => {
//     const handleLocation = (pos) => {
//       const crd = pos.coords;
//       this.setState({
//         ...this.state.marker,
//         latitude: crd.latitude,
//         longitude: crd.longitude,
//       });
//     };
//     navigator.geolocation.getCurrentPosition(handleLocation, null, {
//       enableHighAccuracy: true,
//       timeout: 5000,
//     });
//   };

//   getCoordinates = (event) => {
//     this.setState({
//       ...this.state.marker,
//       longitude: event.lngLat[0],
//       latitude: event.lngLat[1],
//     });
//     this.setState({
//       ...this.state.viewport,
//       longitude: event.lngLat[0],
//       latitude: event.lngLat[1],
//     });
//   };

//   render() {
//     const { MentionSuggestions } = this.mentionPlugin;
//     const plugins = [this.mentionPlugin];

//     return (
//       <>
//         <div className={editorStyles.editor} onClick={this.focus}>
//           <Editor
//             editorState={this.state.editorState}
//             onChange={this.onChange}
//             plugins={plugins}
//             ref={(element) => {
//               this.editor = element;
//             }}
//           />
//           <MentionSuggestions
//             onSearchChange={this.onSearchChange}
//             suggestions={this.state.suggestions}
//             entryComponent={Entry}
//           />
//         </div>
//         <div className="mx-1 p-1">
//           <ResizeDetector handleWidth handleHeight onResize={this.handleResize}>
//             <div
//               className="sm:w-3/5 sm:h-3/5 lg:w-2/5 lg:h-2/5"
//               ref={this.myMap}
//             >
//               <ReactMapGL
//                 {...this.state.viewport}
//                 mapStyle={mapStyle}
//                 onViewportChange={(viewport) => this.setState({ viewport })}
//                 mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}
//               >
//                 <GeolocateControl
//                   positionOptions={{ enableHighAccuracy: true }}
//                   trackUserLocation={false}
//                   showUserLocation={true}
//                   onGeolocate={this.handleGeolocate}
//                 />
//                 <Marker
//                   latitude={this.state.marker.latitude}
//                   longitude={this.state.marker.latitude}
//                   offsetLeft={0}
//                   offsetTop={0}
//                   draggable={true}
//                   captureScroll={true}
//                   captureDrag={true}
//                   onViewportChange={(viewport) => this.setState({ viewport })}
//                   onDragEnd={(event) => this.getCoordinates(event)}
//                 >
//                   <div className="text-md">X</div>
//                   <FaMapMarkerAlt color="black" />
//                 </Marker>
//                 <div className="block m-2 w-2/5 sm:w-3/5  bg-gray-800 opacity-50">
//                   <span className="text-gray-100 text-sm">
//                     Latitude: {this.state.marker.latitude}
//                   </span>
//                   <br />
//                   <span className="text-gray-100 text-sm">
//                     Longitude: {this.state.marker.longitude}
//                   </span>
//                 </div>
//               </ReactMapGL>
//             </div>
//           </ResizeDetector>
//           <button type="submit" className="button is-primary m-2">
//             Add message
//           </button>
//         </div>
//       </>
//     );
//   }
// }

  const match =
    user &&
    matchPath(`/ngos/create-message/${user._id}`, {
      path: '/ngos/create-message/:id',
      exact: true,
      strict: false,
    });


    /**
 * 
 * <Navbar />
      <div className="p-2 m-3">
        <Link
          to={{ pathname: `/ngos/create-message/${match.params.id}` }}
          className={`bg-transparent m-2 py-3 px-3 mt-3 rounded border hover:bg-pink-400 text-gray-800 hover:text-gray-200`}
        >
          fill a message
        </Link>
      </div>
      <div className="sm:w-full h-auto md:w-2/5 p-3 m-5 bg-green-100">
        <p> Latest Feeds Refresh once if no feeds </p>
        <FeedsCard />
      </div>
 */


     // const feeds = await context.app
    //   .service("feeds")
    //   .Model.find()
    //   .populate("user_id", "-password -__v");
    // context.result = feeds;